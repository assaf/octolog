#!/usr/bin/env node
/* vim: set filetype=javascript : */
var Coffee  = require("coffee-script"),
    File    = require("fs");


var USAGE = ""
  + "\n"
  + "  Usage: octolog [options] config-file\n"
  + "\n"
  + "  Options:\n"
  + "    -v, --version            show version number\n"
  + "    -h, --help               show this help page\n"
  ;



// Parse command line arguments.
var args = process.argv.slice(2),
    arg,
    filename,
    port;

while (arg = args.shift()) {
  switch (arg) {
    case '-h':
    case '--help':
      process.stdout.write(USAGE);
      process.exit(0);
      break;
    case '-v':
    case '--version':
      var package = File.readFileSync(__dirname + "/../package.json", "utf-8"),
          version = JSON.parse(package).version;
      process.stdout.write("Version " + version + "\n");
      process.exit(0);
      break;
    default:
      filename = arg;
  }
}

// Need a configuration filename to proceed.
if (!filename) {
  process.stderr.write(USAGE);
  process.exit(1);
}


// Teach Node how to load CoffeeScript files, the rest of the code is CS.
if (!require.extensions[".coffee"]) {
  require.extensions[".coffee"] = function(module, filename) {
    var source = coffee.compile(File.readFileSync(filename, "utf8"));
    return module._compile(source, filename);
  }
}

// Load the configuration file.
var json = File.readFileSync(filename, "utf-8"),
    proxy = require(__dirname + "/../lib/proxy.coffee"),
    config;

// Parse the configuration file, catch the exception and print it out so it
// makes sense, otherwise every JSON error (like missing comma or closing brace)
// looks like a bug it the code.
try {
  config = JSON.parse(json);
} catch (error) {
  process.stderr.write(error.message + " in " + filename + "\n\n");
  process.exit(2);
}

// Do it!
proxy(config);

